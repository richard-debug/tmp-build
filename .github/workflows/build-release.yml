name: Build and Release

on:
  workflow_dispatch:
  push:
    paths:
      - cur_ver.json

jobs:
  generate_matrix:
    name: Set matrix
    runs-on: ubuntu-latest
    outputs:
      sdks: ${{ steps.out.outputs.sdks }}
    strategy:
      matrix:
        arch:
          - x86_64
        ref:
          - openwrt-23.05

    steps:
      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ matrix.ref }}

      - name: Set targets
        id: find_targets
        run: |
          REF=${{ matrix.ref }}
          JSON='['
          FIRST=1
          while read -r line; do
            ARCH=$(echo "$line" | cut -d " " -f 1)
            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            FIRST=0
            JSON="$JSON"'{"arch":"'"$ARCH"'","ref":"'"$REF"'"}'
          done <<< $(perl ./scripts/dump-target-info.pl architectures 2>/dev/null)
          JSON="$JSON"']'
          echo -e "\n---- sdks ----\n"
          echo "$JSON"
          echo -e "\n---- sdks ----\n"
          echo "sdks=$JSON" >> "$GITHUB_OUTPUT"


      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.ref }}
          outputs: |-
            sdks: ${{ steps.find_targets.outputs.sdks }}

  gather_matrix:
    name: Gather build matrices
    runs-on: ubuntu-latest
    needs: generate_matrix
    outputs:
      result: ${{ steps.gather.outputs.result }}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: generate_matrix
      - name: Gather matrices
        id: gather
        run: |
          result=$(jq -c '.sdks[]' <<< '${{ steps.read.outputs.result }}' | jq -c -s add)
          echo "result=${result}" >> $GITHUB_OUTPUT

  release:
    name: Build for ${{ matrix.arch }}-${{ matrix.ref }}
    runs-on: ubuntu-latest
    needs: gather_matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.gather_matrix.outputs.result) }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: false
        

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          
      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
            
      - name: Install nvchecker
        run: pip3 install nvchecker

      - name: Checkout Tailscale
        uses: actions/checkout@v4
        
      - name: Get build path
        id: get_build_path
        run: |
          REF=${{ matrix.ref }}
          if [[ $REF == openwrt-* ]]; then
            # openwrt-22.03 -> releases/packages-22.03
            VERSION=${REF//openwrt-/}
            pkg=releases/packages-$VERSION
            log=releases/faillogs-$VERSION
          else
            # master -> snapshots/packages
            pkg=snapshots/packages
            log=snapshots/faillogs
          fi
          echo "pkg=$pkg" >> "$GITHUB_OUTPUT"
          echo "log=$log" >> "$GITHUB_OUTPUT"

      - name: Retrieve Version
        id: ver
        run: |
          cp cur_ver.json new_ver.json
          vers=$(nvcmp -c nvchecker.toml -aj)
          jq -cr 'map("\(.name)=\(.newver)") | .[]' <<< $vers >> $GITHUB_OUTPUT
          
      - name: Checkout Tailscale
        uses: actions/checkout@v4
        with:
          repository: tailscale/tailscale
          fetch-depth: 0

      - name: List files
        run: ls -la

      - name: Build Tailscale Binaries
        run: |
          ./build_dist.sh --extra-small tailscale.com/cmd/tailscale
          ./build_dist.sh --extra-small tailscale.com/cmd/tailscaled
          
      - name: Build OpenWRT Package
        uses: moetayuko/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.ref }}
          EXTRA_FEEDS: >-
            src-git|tailscale|https://github.com/tailscale/tailscale^${{ steps.ver.outputs.tailscale }}
          V: s
          IGNORE_ERRORS: n m y
          BUILD_LOG: 1
          
      - name: List files
        run: ls -la
        
      - name: Prepare Output Folder
        run: |
          PKG_DIR=${{ steps.get_build_path.outputs.pkg }}/${{ matrix.arch }}
          mkdir -p dist/$PKG_DIR 
          rsync -av bin/packages/${{ matrix.arch }}/tailscale* dist/$PKG_DIR/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-${{ matrix.arch }}-${{ matrix.ref }}
          path: |
            path: dist/
          retention-days: 7
